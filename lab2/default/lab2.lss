
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000496  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000021  00800100  00800100  0000050a  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  0000050a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000087  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003da  00000000  00000000  000005d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001fc  00000000  00000000  000009ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000458  00000000  00000000  00000ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016d  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000015d  00000000  00000000  000011dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  0000133a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e9       	ldi	r30, 0x96	; 150
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  c6:	0c 94 49 02 	jmp	0x492	; 0x492 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <chk_buttons>:
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) 
{
    static uint16_t state[8] = {0,0,0,0,0,0,0,0};
    state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	49 b3       	in	r20, 0x19	; 25
  d2:	fc 01       	movw	r30, r24
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	e0 50       	subi	r30, 0x00	; 0
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	20 81       	ld	r18, Z
  de:	31 81       	ldd	r19, Z+1	; 0x01
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	30 6e       	ori	r19, 0xE0	; 224
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <chk_buttons+0x20>
  ea:	55 95       	asr	r21
  ec:	47 95       	ror	r20
  ee:	8a 95       	dec	r24
  f0:	e2 f7       	brpl	.-8      	; 0xea <chk_buttons+0x1c>
  f2:	41 70       	andi	r20, 0x01	; 1
  f4:	50 70       	andi	r21, 0x00	; 0
  f6:	24 2b       	or	r18, r20
  f8:	35 2b       	or	r19, r21
  fa:	31 83       	std	Z+1, r19	; 0x01
  fc:	20 83       	st	Z, r18
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	20 50       	subi	r18, 0x00	; 0
 102:	30 4f       	sbci	r19, 0xF0	; 240
 104:	09 f4       	brne	.+2      	; 0x108 <chk_buttons+0x3a>
 106:	81 e0       	ldi	r24, 0x01	; 1
    if (state[button] == 0xF000) return 1;
    return 0;
}
 108:	08 95       	ret

0000010a <segsum>:
//                                   segment_sum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum)
{
 10a:	1f 93       	push	r17
 10c:	9c 01       	movw	r18, r24
    uint8_t numDigits;
    //determine how many digits there are 
    if(0 <= sum && sum < 10){
        numDigits = 1;
    }
    if(10 <= sum && sum < 100){
 10e:	0a 97       	sbiw	r24, 0x0a	; 10
 110:	8a 35       	cpi	r24, 0x5A	; 90
 112:	91 05       	cpc	r25, r1
 114:	10 f4       	brcc	.+4      	; 0x11a <segsum+0x10>
 116:	42 e0       	ldi	r20, 0x02	; 2
 118:	01 c0       	rjmp	.+2      	; 0x11c <segsum+0x12>
 11a:	41 e0       	ldi	r20, 0x01	; 1
        numDigits = 2;
    }
    if(100 <= sum && sum < 1000){
 11c:	c9 01       	movw	r24, r18
 11e:	84 56       	subi	r24, 0x64	; 100
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	84 58       	subi	r24, 0x84	; 132
 124:	93 40       	sbci	r25, 0x03	; 3
 126:	08 f4       	brcc	.+2      	; 0x12a <segsum+0x20>
 128:	43 e0       	ldi	r20, 0x03	; 3
        numDigits = 3;
    }
    if(1000 <= sum && sum < 10000){
 12a:	c9 01       	movw	r24, r18
 12c:	88 5e       	subi	r24, 0xE8	; 232
 12e:	93 40       	sbci	r25, 0x03	; 3
 130:	88 52       	subi	r24, 0x28	; 40
 132:	93 42       	sbci	r25, 0x23	; 35
 134:	08 f4       	brcc	.+2      	; 0x138 <segsum+0x2e>
 136:	44 e0       	ldi	r20, 0x04	; 4
        numDigits = 4;
    }
    //break up decimal sum into 4 digit-segments
    thousands = (sum / 1000) % 10;
    hundreds = (sum / 100) % 10;
 138:	c9 01       	movw	r24, r18
 13a:	64 e6       	ldi	r22, 0x64	; 100
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	0e 94 35 02 	call	0x46a	; 0x46a <__udivmodhi4>
 142:	cb 01       	movw	r24, r22
 144:	6a e0       	ldi	r22, 0x0A	; 10
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 35 02 	call	0x46a	; 0x46a <__udivmodhi4>
 14c:	18 2f       	mov	r17, r24
    tens = (sum / 10) % 10;
 14e:	c9 01       	movw	r24, r18
 150:	6a e0       	ldi	r22, 0x0A	; 10
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	0e 94 35 02 	call	0x46a	; 0x46a <__udivmodhi4>
 158:	cb 01       	movw	r24, r22
 15a:	6a e0       	ldi	r22, 0x0A	; 10
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	0e 94 35 02 	call	0x46a	; 0x46a <__udivmodhi4>
 162:	f8 2f       	mov	r31, r24
    ones = (sum / 1) % 10;
 164:	c9 01       	movw	r24, r18
 166:	6a e0       	ldi	r22, 0x0A	; 10
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	0e 94 35 02 	call	0x46a	; 0x46a <__udivmodhi4>
 16e:	e8 2f       	mov	r30, r24
    //blank out leading zero digits 
    //now move data to right place for misplaced colon position
    if(numDigits == 4){
 170:	44 30       	cpi	r20, 0x04	; 4
 172:	81 f4       	brne	.+32     	; 0x194 <segsum+0x8a>
        segment_data[4] = thousands;
 174:	c9 01       	movw	r24, r18
 176:	68 ee       	ldi	r22, 0xE8	; 232
 178:	73 e0       	ldi	r23, 0x03	; 3
 17a:	0e 94 35 02 	call	0x46a	; 0x46a <__udivmodhi4>
 17e:	cb 01       	movw	r24, r22
 180:	6a e0       	ldi	r22, 0x0A	; 10
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	0e 94 35 02 	call	0x46a	; 0x46a <__udivmodhi4>
 188:	80 93 20 01 	sts	0x0120, r24
        segment_data[3] = hundreds;
 18c:	10 93 1f 01 	sts	0x011F, r17
        segment_data[2] = COLON_OFF_bm;
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	0f c0       	rjmp	.+30     	; 0x1b2 <segsum+0xa8>
        segment_data[1] = tens;
        segment_data[0] = ones;
    }
    if(numDigits == 3){
 194:	43 30       	cpi	r20, 0x03	; 3
 196:	31 f4       	brne	.+12     	; 0x1a4 <segsum+0x9a>
        segment_data[4] = 0xFF;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	80 93 20 01 	sts	0x0120, r24
        segment_data[3] = hundreds;
 19e:	10 93 1f 01 	sts	0x011F, r17
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <segsum+0xa8>
        segment_data[2] = COLON_OFF_bm;
        segment_data[1] = tens;
        segment_data[0] = ones;
    }
    if(numDigits == 2){
 1a4:	42 30       	cpi	r20, 0x02	; 2
 1a6:	51 f4       	brne	.+20     	; 0x1bc <segsum+0xb2>
        segment_data[4] = 0xFF;
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	80 93 20 01 	sts	0x0120, r24
        segment_data[3] = 0xFF;
 1ae:	80 93 1f 01 	sts	0x011F, r24
        segment_data[2] = COLON_OFF_bm;
 1b2:	80 93 1e 01 	sts	0x011E, r24
        segment_data[1] = tens;
 1b6:	f0 93 1d 01 	sts	0x011D, r31
 1ba:	0b c0       	rjmp	.+22     	; 0x1d2 <segsum+0xc8>
        segment_data[0] = ones;
    }
    if(numDigits == 1){
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <segsum+0xcc>
        segment_data[4] = 0xFF;
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	80 93 20 01 	sts	0x0120, r24
        segment_data[3] = 0xFF;
 1c6:	80 93 1f 01 	sts	0x011F, r24
        segment_data[2] = COLON_OFF_bm;
 1ca:	80 93 1e 01 	sts	0x011E, r24
        segment_data[1] = 0xFF;
 1ce:	80 93 1d 01 	sts	0x011D, r24
        segment_data[0] = ones;
 1d2:	e0 93 1c 01 	sts	0x011C, r30
    }
}//segment_sum
 1d6:	1f 91       	pop	r17
 1d8:	08 95       	ret

000001da <main>:
//***********************************************************************************


//***********************************************************************************
int main(void)
{   
 1da:	af 92       	push	r10
 1dc:	bf 92       	push	r11
 1de:	cf 92       	push	r12
 1e0:	df 92       	push	r13
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
    uint16_t count = 0;
    uint16_t sum = 0;
    //set port bits 4-7 B as outputs
    DDRB = 0xF0;
 1ee:	80 ef       	ldi	r24, 0xF0	; 240
 1f0:	87 bb       	out	0x17, r24	; 23
 1f2:	00 e0       	ldi	r16, 0x00	; 0
 1f4:	10 e0       	ldi	r17, 0x00	; 0
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1fa:	90 e4       	ldi	r25, 0x40	; 64
 1fc:	c9 2e       	mov	r12, r25
 1fe:	9f e1       	ldi	r25, 0x1F	; 31
 200:	d9 2e       	mov	r13, r25

    while(1){
        _delay_ms(2); //insert loop delay for debounce
        //make PORTA an input port with pullups 
        DDRA = 0x00; //PORTA is an input
        PORTA = 0xFF; //Enable pullups
 202:	bb 24       	eor	r11, r11
 204:	ba 94       	dec	r11
        //enable tristate buffer for pushbutton switches
        PORTB = TRISTATE_ON_bm;
 206:	8f e7       	ldi	r24, 0x7F	; 127
 208:	a8 2e       	mov	r10, r24
 20a:	b0 ea       	ldi	r27, 0xA0	; 160
 20c:	eb 2e       	mov	r14, r27
 20e:	bf e0       	ldi	r27, 0x0F	; 15
 210:	fb 2e       	mov	r15, r27
 212:	c6 01       	movw	r24, r12
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0x3a>
    DDRB = 0xF0;

    while(1){
        _delay_ms(2); //insert loop delay for debounce
        //make PORTA an input port with pullups 
        DDRA = 0x00; //PORTA is an input
 218:	1a ba       	out	0x1a, r1	; 26
        PORTA = 0xFF; //Enable pullups
 21a:	bb ba       	out	0x1b, r11	; 27
        //enable tristate buffer for pushbutton switches
        PORTB = TRISTATE_ON_bm;
 21c:	a8 ba       	out	0x18, r10	; 24
 21e:	c7 01       	movw	r24, r14
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0x46>
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) 
{
    static uint16_t state[8] = {0,0,0,0,0,0,0,0};
    state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
 224:	29 b3       	in	r18, 0x19	; 25
 226:	80 91 00 01 	lds	r24, 0x0100
 22a:	90 91 01 01 	lds	r25, 0x0101
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	90 6e       	ori	r25, 0xE0	; 224
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	21 70       	andi	r18, 0x01	; 1
 238:	30 70       	andi	r19, 0x00	; 0
 23a:	82 2b       	or	r24, r18
 23c:	93 2b       	or	r25, r19
 23e:	90 93 01 01 	sts	0x0101, r25
 242:	80 93 00 01 	sts	0x0100, r24
    if (state[button] == 0xF000) return 1;
 246:	80 50       	subi	r24, 0x00	; 0
 248:	90 4f       	sbci	r25, 0xF0	; 240
 24a:	11 f4       	brne	.+4      	; 0x250 <main+0x76>
        PORTA = 0xFF; //Enable pullups
        //enable tristate buffer for pushbutton switches
        PORTB = TRISTATE_ON_bm;
        //now check each button and increment the count as needed
		_delay_ms(1);        
		if (chk_buttons(0)){ sum += 128; }
 24c:	c0 58       	subi	r28, 0x80	; 128
 24e:	df 4f       	sbci	r29, 0xFF	; 255
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) 
{
    static uint16_t state[8] = {0,0,0,0,0,0,0,0};
    state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
 250:	89 b3       	in	r24, 0x19	; 25
 252:	20 91 02 01 	lds	r18, 0x0102
 256:	30 91 03 01 	lds	r19, 0x0103
 25a:	22 0f       	add	r18, r18
 25c:	33 1f       	adc	r19, r19
 25e:	30 6e       	ori	r19, 0xE0	; 224
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	95 95       	asr	r25
 264:	87 95       	ror	r24
 266:	81 70       	andi	r24, 0x01	; 1
 268:	90 70       	andi	r25, 0x00	; 0
 26a:	28 2b       	or	r18, r24
 26c:	39 2b       	or	r19, r25
 26e:	30 93 03 01 	sts	0x0103, r19
 272:	20 93 02 01 	sts	0x0102, r18
    if (state[button] == 0xF000) return 1;
 276:	20 50       	subi	r18, 0x00	; 0
 278:	30 4f       	sbci	r19, 0xF0	; 240
 27a:	11 f4       	brne	.+4      	; 0x280 <main+0xa6>
        //enable tristate buffer for pushbutton switches
        PORTB = TRISTATE_ON_bm;
        //now check each button and increment the count as needed
		_delay_ms(1);        
		if (chk_buttons(0)){ sum += 128; }
        if (chk_buttons(1)){ sum += 64; }
 27c:	c0 5c       	subi	r28, 0xC0	; 192
 27e:	df 4f       	sbci	r29, 0xFF	; 255
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) 
{
    static uint16_t state[8] = {0,0,0,0,0,0,0,0};
    state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
 280:	89 b3       	in	r24, 0x19	; 25
 282:	20 91 04 01 	lds	r18, 0x0104
 286:	30 91 05 01 	lds	r19, 0x0105
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	30 6e       	ori	r19, 0xE0	; 224
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	95 95       	asr	r25
 294:	87 95       	ror	r24
 296:	95 95       	asr	r25
 298:	87 95       	ror	r24
 29a:	81 70       	andi	r24, 0x01	; 1
 29c:	90 70       	andi	r25, 0x00	; 0
 29e:	28 2b       	or	r18, r24
 2a0:	39 2b       	or	r19, r25
 2a2:	30 93 05 01 	sts	0x0105, r19
 2a6:	20 93 04 01 	sts	0x0104, r18
    if (state[button] == 0xF000) return 1;
 2aa:	20 50       	subi	r18, 0x00	; 0
 2ac:	30 4f       	sbci	r19, 0xF0	; 240
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <main+0xd8>
        PORTB = TRISTATE_ON_bm;
        //now check each button and increment the count as needed
		_delay_ms(1);        
		if (chk_buttons(0)){ sum += 128; }
        if (chk_buttons(1)){ sum += 64; }
        if (chk_buttons(2)){ sum += 32; }
 2b0:	a0 96       	adiw	r28, 0x20	; 32
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) 
{
    static uint16_t state[8] = {0,0,0,0,0,0,0,0};
    state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
 2b2:	89 b3       	in	r24, 0x19	; 25
 2b4:	20 91 06 01 	lds	r18, 0x0106
 2b8:	30 91 07 01 	lds	r19, 0x0107
 2bc:	22 0f       	add	r18, r18
 2be:	33 1f       	adc	r19, r19
 2c0:	30 6e       	ori	r19, 0xE0	; 224
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	43 e0       	ldi	r20, 0x03	; 3
 2c6:	95 95       	asr	r25
 2c8:	87 95       	ror	r24
 2ca:	4a 95       	dec	r20
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0xec>
 2ce:	81 70       	andi	r24, 0x01	; 1
 2d0:	90 70       	andi	r25, 0x00	; 0
 2d2:	28 2b       	or	r18, r24
 2d4:	39 2b       	or	r19, r25
 2d6:	30 93 07 01 	sts	0x0107, r19
 2da:	20 93 06 01 	sts	0x0106, r18
    if (state[button] == 0xF000) return 1;
 2de:	20 50       	subi	r18, 0x00	; 0
 2e0:	30 4f       	sbci	r19, 0xF0	; 240
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <main+0x10c>
        //now check each button and increment the count as needed
		_delay_ms(1);        
		if (chk_buttons(0)){ sum += 128; }
        if (chk_buttons(1)){ sum += 64; }
        if (chk_buttons(2)){ sum += 32; }
        if (chk_buttons(3)){ sum += 16; }
 2e4:	60 96       	adiw	r28, 0x10	; 16
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) 
{
    static uint16_t state[8] = {0,0,0,0,0,0,0,0};
    state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
 2e6:	89 b3       	in	r24, 0x19	; 25
 2e8:	20 91 08 01 	lds	r18, 0x0108
 2ec:	30 91 09 01 	lds	r19, 0x0109
 2f0:	22 0f       	add	r18, r18
 2f2:	33 1f       	adc	r19, r19
 2f4:	30 6e       	ori	r19, 0xE0	; 224
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	a4 e0       	ldi	r26, 0x04	; 4
 2fa:	95 95       	asr	r25
 2fc:	87 95       	ror	r24
 2fe:	aa 95       	dec	r26
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x120>
 302:	81 70       	andi	r24, 0x01	; 1
 304:	90 70       	andi	r25, 0x00	; 0
 306:	28 2b       	or	r18, r24
 308:	39 2b       	or	r19, r25
 30a:	30 93 09 01 	sts	0x0109, r19
 30e:	20 93 08 01 	sts	0x0108, r18
    if (state[button] == 0xF000) return 1;
 312:	20 50       	subi	r18, 0x00	; 0
 314:	30 4f       	sbci	r19, 0xF0	; 240
 316:	09 f4       	brne	.+2      	; 0x31a <main+0x140>
		_delay_ms(1);        
		if (chk_buttons(0)){ sum += 128; }
        if (chk_buttons(1)){ sum += 64; }
        if (chk_buttons(2)){ sum += 32; }
        if (chk_buttons(3)){ sum += 16; }
        if (chk_buttons(4)){ sum += 8; }
 318:	28 96       	adiw	r28, 0x08	; 8
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) 
{
    static uint16_t state[8] = {0,0,0,0,0,0,0,0};
    state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
 31a:	89 b3       	in	r24, 0x19	; 25
 31c:	20 91 0a 01 	lds	r18, 0x010A
 320:	30 91 0b 01 	lds	r19, 0x010B
 324:	22 0f       	add	r18, r18
 326:	33 1f       	adc	r19, r19
 328:	30 6e       	ori	r19, 0xE0	; 224
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	e5 e0       	ldi	r30, 0x05	; 5
 32e:	95 95       	asr	r25
 330:	87 95       	ror	r24
 332:	ea 95       	dec	r30
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x154>
 336:	81 70       	andi	r24, 0x01	; 1
 338:	90 70       	andi	r25, 0x00	; 0
 33a:	28 2b       	or	r18, r24
 33c:	39 2b       	or	r19, r25
 33e:	30 93 0b 01 	sts	0x010B, r19
 342:	20 93 0a 01 	sts	0x010A, r18
    if (state[button] == 0xF000) return 1;
 346:	20 50       	subi	r18, 0x00	; 0
 348:	30 4f       	sbci	r19, 0xF0	; 240
 34a:	09 f4       	brne	.+2      	; 0x34e <main+0x174>
		if (chk_buttons(0)){ sum += 128; }
        if (chk_buttons(1)){ sum += 64; }
        if (chk_buttons(2)){ sum += 32; }
        if (chk_buttons(3)){ sum += 16; }
        if (chk_buttons(4)){ sum += 8; }
        if (chk_buttons(5)){ sum += 4; }
 34c:	24 96       	adiw	r28, 0x04	; 4
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) 
{
    static uint16_t state[8] = {0,0,0,0,0,0,0,0};
    state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
 34e:	89 b3       	in	r24, 0x19	; 25
 350:	20 91 0c 01 	lds	r18, 0x010C
 354:	30 91 0d 01 	lds	r19, 0x010D
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	30 6e       	ori	r19, 0xE0	; 224
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	66 e0       	ldi	r22, 0x06	; 6
 362:	95 95       	asr	r25
 364:	87 95       	ror	r24
 366:	6a 95       	dec	r22
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x188>
 36a:	81 70       	andi	r24, 0x01	; 1
 36c:	90 70       	andi	r25, 0x00	; 0
 36e:	28 2b       	or	r18, r24
 370:	39 2b       	or	r19, r25
 372:	30 93 0d 01 	sts	0x010D, r19
 376:	20 93 0c 01 	sts	0x010C, r18
    if (state[button] == 0xF000) return 1;
 37a:	20 50       	subi	r18, 0x00	; 0
 37c:	30 4f       	sbci	r19, 0xF0	; 240
 37e:	09 f4       	brne	.+2      	; 0x382 <main+0x1a8>
        if (chk_buttons(1)){ sum += 64; }
        if (chk_buttons(2)){ sum += 32; }
        if (chk_buttons(3)){ sum += 16; }
        if (chk_buttons(4)){ sum += 8; }
        if (chk_buttons(5)){ sum += 4; }
        if (chk_buttons(6)){ sum += 2; }
 380:	22 96       	adiw	r28, 0x02	; 2
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) 
{
    static uint16_t state[8] = {0,0,0,0,0,0,0,0};
    state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
 382:	29 b3       	in	r18, 0x19	; 25
 384:	80 91 0e 01 	lds	r24, 0x010E
 388:	90 91 0f 01 	lds	r25, 0x010F
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	90 6e       	ori	r25, 0xE0	; 224
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	22 0f       	add	r18, r18
 396:	23 2f       	mov	r18, r19
 398:	22 1f       	adc	r18, r18
 39a:	33 0b       	sbc	r19, r19
 39c:	31 95       	neg	r19
 39e:	82 2b       	or	r24, r18
 3a0:	93 2b       	or	r25, r19
 3a2:	90 93 0f 01 	sts	0x010F, r25
 3a6:	80 93 0e 01 	sts	0x010E, r24
    if (state[button] == 0xF000) return 1;
 3aa:	80 50       	subi	r24, 0x00	; 0
 3ac:	90 4f       	sbci	r25, 0xF0	; 240
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <main+0x1d8>
        if (chk_buttons(2)){ sum += 32; }
        if (chk_buttons(3)){ sum += 16; }
        if (chk_buttons(4)){ sum += 8; }
        if (chk_buttons(5)){ sum += 4; }
        if (chk_buttons(6)){ sum += 2; }
        if (chk_buttons(7)){ sum += 1; }
 3b0:	21 96       	adiw	r28, 0x01	; 1

        //bound a counter (0-4) to keep track of digit to display 
        if (count > 4)
 3b2:	05 30       	cpi	r16, 0x05	; 5
 3b4:	11 05       	cpc	r17, r1
 3b6:	10 f0       	brcs	.+4      	; 0x3bc <main+0x1e2>
 3b8:	00 e0       	ldi	r16, 0x00	; 0
 3ba:	10 e0       	ldi	r17, 0x00	; 0
            count = 0;
        //bound the sum to 0 - 1023
        if (sum > 1023)
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	c0 30       	cpi	r28, 0x00	; 0
 3c0:	d8 07       	cpc	r29, r24
 3c2:	10 f0       	brcs	.+4      	; 0x3c8 <main+0x1ee>
 3c4:	c0 e0       	ldi	r28, 0x00	; 0
 3c6:	d0 e0       	ldi	r29, 0x00	; 0
            sum = 0;
        //break up the disp_value to 4, BCD digits in the array: call (segsum)
        segsum(sum);
 3c8:	ce 01       	movw	r24, r28
 3ca:	0e 94 85 00 	call	0x10a	; 0x10a <segsum>
        //make PORTA an output
        DDRA = 0xFF;
 3ce:	ba ba       	out	0x1a, r11	; 26
        //send 7 segment code to LED segments
        PORTA = LED_convert(segment_data[count]);
 3d0:	f8 01       	movw	r30, r16
 3d2:	e4 5e       	subi	r30, 0xE4	; 228
 3d4:	fe 4f       	sbci	r31, 0xFE	; 254
 3d6:	80 81       	ld	r24, Z
 3d8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_convert>
 3dc:	8b bb       	out	0x1b, r24	; 27
        //send PORTB the digit to display
        PORTB = count << 4;  //set PORTB4-6 to select digit
 3de:	80 2f       	mov	r24, r16
 3e0:	82 95       	swap	r24
 3e2:	80 7f       	andi	r24, 0xF0	; 240
 3e4:	88 bb       	out	0x18, r24	; 24
        //update digit to display
        count++;
 3e6:	0f 5f       	subi	r16, 0xFF	; 255
 3e8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ea:	13 cf       	rjmp	.-474    	; 0x212 <main+0x38>

000003ec <LED_convert>:
    }
}

uint8_t LED_convert(uint8_t digit)
{
    if(digit == 0){
 3ec:	88 23       	and	r24, r24
 3ee:	29 f1       	breq	.+74     	; 0x43a <LED_convert+0x4e>
        return 0b11000000;
    }
    if(digit == 1){
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	11 f4       	brne	.+4      	; 0x3f8 <LED_convert+0xc>
 3f4:	89 ef       	ldi	r24, 0xF9	; 249
 3f6:	08 95       	ret
        return 0b11111001;
    }
    if(digit == 2){
 3f8:	82 30       	cpi	r24, 0x02	; 2
 3fa:	11 f4       	brne	.+4      	; 0x400 <LED_convert+0x14>
 3fc:	84 ea       	ldi	r24, 0xA4	; 164
 3fe:	08 95       	ret
        return 0b10100100;
    }
    if(digit == 3){
 400:	83 30       	cpi	r24, 0x03	; 3
 402:	11 f4       	brne	.+4      	; 0x408 <LED_convert+0x1c>
 404:	80 eb       	ldi	r24, 0xB0	; 176
 406:	08 95       	ret
        return 0b10110000;
    }
    if(digit == 4){
 408:	84 30       	cpi	r24, 0x04	; 4
 40a:	11 f4       	brne	.+4      	; 0x410 <LED_convert+0x24>
 40c:	89 e9       	ldi	r24, 0x99	; 153
 40e:	08 95       	ret
        return 0b10011001;
    }
    if(digit == 5){
 410:	85 30       	cpi	r24, 0x05	; 5
 412:	11 f4       	brne	.+4      	; 0x418 <LED_convert+0x2c>
 414:	82 e9       	ldi	r24, 0x92	; 146
 416:	08 95       	ret
        return 0b10010010;
    }
    if(digit == 6){
 418:	86 30       	cpi	r24, 0x06	; 6
 41a:	11 f4       	brne	.+4      	; 0x420 <LED_convert+0x34>
 41c:	82 e8       	ldi	r24, 0x82	; 130
 41e:	08 95       	ret
        return 0b10000010;
    }
    if(digit == 7){
 420:	87 30       	cpi	r24, 0x07	; 7
 422:	11 f4       	brne	.+4      	; 0x428 <LED_convert+0x3c>
 424:	88 ef       	ldi	r24, 0xF8	; 248
 426:	08 95       	ret
        return 0b11111000;
    }
    if(digit == 8){
 428:	88 30       	cpi	r24, 0x08	; 8
 42a:	11 f4       	brne	.+4      	; 0x430 <LED_convert+0x44>
 42c:	80 e8       	ldi	r24, 0x80	; 128
 42e:	08 95       	ret
        return 0b10000000;
    }
    if(digit == 9){
 430:	89 30       	cpi	r24, 0x09	; 9
 432:	11 f4       	brne	.+4      	; 0x438 <LED_convert+0x4c>
 434:	80 e9       	ldi	r24, 0x90	; 144
 436:	08 95       	ret
 438:	08 95       	ret
        return 0b10010000;
    }
}
 43a:	80 ec       	ldi	r24, 0xC0	; 192
 43c:	08 95       	ret

0000043e <LED_write>:
#include "led_driver.h"

void LED_write(uint8_t * segment_data)
{
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	ec 01       	movw	r28, r24
 446:	15 e0       	ldi	r17, 0x05	; 5
    uint8_t i;
    for (i = 5; i > 0; i--) 
    {
        PORTA = LED_convert(segment_data[i]);
 448:	8d 81       	ldd	r24, Y+5	; 0x05
 44a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_convert>
 44e:	8b bb       	out	0x1b, r24	; 27
        PORTB = i << 3;     //to change pins 4-6
 450:	81 2f       	mov	r24, r17
 452:	88 0f       	add	r24, r24
 454:	88 0f       	add	r24, r24
 456:	88 0f       	add	r24, r24
 458:	88 bb       	out	0x18, r24	; 24
#include "led_driver.h"

void LED_write(uint8_t * segment_data)
{
    uint8_t i;
    for (i = 5; i > 0; i--) 
 45a:	11 50       	subi	r17, 0x01	; 1
 45c:	21 97       	sbiw	r28, 0x01	; 1
 45e:	11 23       	and	r17, r17
 460:	99 f7       	brne	.-26     	; 0x448 <LED_write+0xa>
    {
        PORTA = LED_convert(segment_data[i]);
        PORTB = i << 3;     //to change pins 4-6
    }
}
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	1f 91       	pop	r17
 468:	08 95       	ret

0000046a <__udivmodhi4>:
 46a:	aa 1b       	sub	r26, r26
 46c:	bb 1b       	sub	r27, r27
 46e:	51 e1       	ldi	r21, 0x11	; 17
 470:	07 c0       	rjmp	.+14     	; 0x480 <__udivmodhi4_ep>

00000472 <__udivmodhi4_loop>:
 472:	aa 1f       	adc	r26, r26
 474:	bb 1f       	adc	r27, r27
 476:	a6 17       	cp	r26, r22
 478:	b7 07       	cpc	r27, r23
 47a:	10 f0       	brcs	.+4      	; 0x480 <__udivmodhi4_ep>
 47c:	a6 1b       	sub	r26, r22
 47e:	b7 0b       	sbc	r27, r23

00000480 <__udivmodhi4_ep>:
 480:	88 1f       	adc	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	5a 95       	dec	r21
 486:	a9 f7       	brne	.-22     	; 0x472 <__udivmodhi4_loop>
 488:	80 95       	com	r24
 48a:	90 95       	com	r25
 48c:	bc 01       	movw	r22, r24
 48e:	cd 01       	movw	r24, r26
 490:	08 95       	ret

00000492 <_exit>:
 492:	f8 94       	cli

00000494 <__stop_program>:
 494:	ff cf       	rjmp	.-2      	; 0x494 <__stop_program>
