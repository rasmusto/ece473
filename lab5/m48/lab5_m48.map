Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm48.o (exit)
/usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_copy_data.o)
                              lab5_m48.o (__do_copy_data)
/usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_clear_bss.o)
                              lab5_m48.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

temperature         0x2               lab5_m48.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00002000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm48.o
LOAD lab5_m48.o
LOAD twi.o
LOAD /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000      0x1a4
 *(.vectors)
 .vectors       0x00000000       0x34 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm48.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x00000034                . = ALIGN (0x2)
                0x00000034                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000034        0x0 linker stubs
 *(.trampolines*)
                0x00000034                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000034                __ctors_start = .
 *(.ctors)
                0x00000034                __ctors_end = .
                0x00000034                __dtors_start = .
 *(.dtors)
                0x00000034                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000034        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm48.o
                0x00000034                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000034        0xc /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm48.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000040       0x16 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_copy_data.o)
                0x00000040                __do_copy_data
 .init4         0x00000056       0x10 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_clear_bss.o)
                0x00000056                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000066        0x4 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm48.o
 *(.init9)
 *(.text)
 .text          0x0000006a        0x2 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm48.o
                0x0000006a                __vector_22
                0x0000006a                __vector_1
                0x0000006a                __vector_24
                0x0000006a                __vector_12
                0x0000006a                __bad_interrupt
                0x0000006a                __vector_6
                0x0000006a                __vector_3
                0x0000006a                __vector_23
                0x0000006a                __vector_25
                0x0000006a                __vector_11
                0x0000006a                __vector_13
                0x0000006a                __vector_17
                0x0000006a                __vector_19
                0x0000006a                __vector_7
                0x0000006a                __vector_5
                0x0000006a                __vector_4
                0x0000006a                __vector_9
                0x0000006a                __vector_2
                0x0000006a                __vector_21
                0x0000006a                __vector_15
                0x0000006a                __vector_8
                0x0000006a                __vector_14
                0x0000006a                __vector_10
                0x0000006a                __vector_16
                0x0000006a                __vector_18
 .text          0x0000006c       0xc8 lab5_m48.o
                0x0000006c                __vector_20
                0x000000d4                USART_init
                0x000000ea                main
 .text          0x00000134       0x6c twi.o
                0x00000134                rd_temp
 .text          0x000001a0        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
 .text          0x000001a0        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_copy_data.o)
 .text          0x000001a0        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_clear_bss.o)
                0x000001a0                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x000001a0        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x000001a0        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_copy_data.o)
 .text.libgcc   0x000001a0        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_clear_bss.o)
                0x000001a0                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000001a0        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
                0x000001a0                exit
                0x000001a0                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000001a0        0x4 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x000001a4                _etext = .

.data           0x00800100        0x2 load address 0x000001a4
                0x00800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800100        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm48.o
 .data          0x00800100        0x1 lab5_m48.o
                0x00800100                high_byte_flag
 .data          0x00800101        0x0 twi.o
 .data          0x00800101        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
 .data          0x00800101        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_copy_data.o)
 .data          0x00800101        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800102                . = ALIGN (0x2)
 *fill*         0x00800101        0x1 00
                0x00800102                _edata = .
                0x00800102                PROVIDE (__data_end, .)

.bss            0x00800102        0x2
                0x00800102                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800102        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm48.o
 .bss           0x00800102        0x0 lab5_m48.o
 .bss           0x00800102        0x0 twi.o
 .bss           0x00800102        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_exit.o)
 .bss           0x00800102        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_copy_data.o)
 .bss           0x00800102        0x0 /usr/lib/gcc/avr/4.3.4/avr4/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00800102        0x2 lab5_m48.o
                0x00800102                temperature
                0x00800104                PROVIDE (__bss_end, .)
                0x000001a4                __data_load_start = LOADADDR (.data)
                0x000001a6                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00800104        0x0
                0x00800104                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00800104                PROVIDE (__noinit_end, .)
                0x00800104                _end = .
                0x00800104                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000      0xe40
 *(.stab)
 .stab          0x00000000      0x6b4 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm48.o
 .stab          0x000006b4      0x534 lab5_m48.o
                                0x540 (size before relaxing)
 .stab          0x00000be8      0x258 twi.o
                                0x414 (size before relaxing)

.stabstr        0x00000000      0x874
 *(.stabstr)
 .stabstr       0x00000000      0x874 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr4/crtm48.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(lab5_m48.elf elf32-avr)
LOAD linker stubs
